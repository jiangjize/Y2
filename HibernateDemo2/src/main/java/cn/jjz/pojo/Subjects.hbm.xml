<!--
<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
&lt;!&ndash; package声明pojo类所在的包，如果不写 那么在class中需要指明pojo类所在的包
       schema指数据库模式 一个模式下可以有多张表
   &ndash;&gt;
<hibernate-mapping package="cn.jjz.pojo">
    &lt;!&ndash; class指映射一个实体类entity
       提供了公共的无参构造方法-通过反射产生对象
       属性用private修饰，并且生成对应的get/set方法
       类不能用final来修饰-hibernate会产生代理类（cglib）
       类需要指明标识
       name表示pojo类名
       table表示pojo类对应数据库中的表名；如果不写默认是类名
    &ndash;&gt;
    <class name="Subjects" table="Subjects" dynamic-update="true">
        &lt;!&ndash;
              id表示实体类的标识(OID)
              对应数据库表中的主键
              name指实体类的标识属性名
              column表示对应数据库表的列名：如果不写 则数据库表中列名和属性名一致
              length表示数据库表中 对应数据类型的长度 ，如果不写有默认长度
              type表示类型如果不写hibernate可以找到对应pojo类的属性的类型
           &ndash;&gt;
        <id name="id" column="id">
            <generator class="native"></generator>
        </id>
        <property name="title" column="title"></property>
        <property name="totalVotes" column="totalVotes"></property>
        <property name="viewTimes" column="viewTimes"></property>
        <property name="createDate" column="createDate"></property>
        <set name="optionss" cascade="save-update" inverse="true">
            &lt;!&ndash;多的一方表的外键列&ndash;&gt;
            <key column="id"></key>
            <one-to-many class="cn.jjz.pojo.Options"></one-to-many>
        </set>
    </class>
</hibernate-mapping>-->
